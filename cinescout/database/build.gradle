apply plugin: 'cinescout.kmp.android'
apply plugin: 'app.cash.sqldelight'

sqldelight {
    databases {
        Database {
            dialect(libs.sqlDelight.sqlite.dialect)
            packageName = "cinescout.database"
            schemaOutputDirectory = file("src/commonMain/sqldelight/cinescout/database/schemas")
            verifyMigrations = true
        }
    }
}

moduleDependencies {
    implementation 'utils:kotlin'

    testImplementation 'test:database'
}

kotlin {
    sourceSets {
        "jvmMain" {
            dependencies {
                implementation libs.sqlDelight.sqlite
            }
        }
        "androidMain" {
            dependencies {
                implementation libs.sqlDelight.android
            }
        }
    }
}

dependencies {
    kspJvm libs.koin.ksp
    kspAndroid libs.koin.ksp
    kspCommonMainMetadata libs.koin.ksp

    commonMainApi libs.sqlDelight.coroutines
    commonMainApi libs.sqlDelight.sqlite
    commonMainApi libs.sqlDelight.paging

    commonMainImplementation libs.bundles.base

    commonTestImplementation libs.bundles.test.kotlin
}

afterEvaluate {
    // Disable due: Test run failed to complete. Instrumentation run failed due to Process crashed.
    tasks { "connectedDebugAndroidTest" { enabled = false } }
}

tasks.register("updateDatabase") {
    dependsOn "generateCommonMainDatabaseSchema"
    def migrationFolder = file("${projectDir}/src/commonMain/sqldelight/cinescout/database/migrations")
    def schemaFolder = file("${projectDir}/src/commonMain/sqldelight/cinescout/database/schemas")
    doLast {
        def threeMonthsAgo = new Date() - 90
        logger.warn("Deleting migrations older than ${threeMonthsAgo}")
        migrationFolder.listFiles().each { file ->
            def migrationFile = new File(migrationFolder, file.name)
            def lastModified = migrationFile.lastModified()
            if (lastModified != 0 && lastModified < threeMonthsAgo.time) {
                file.delete()
            }
        }
        schemaFolder.listFiles().each { file ->
            def schemaFile = new File(schemaFolder, file.name)
            def lastModified = schemaFile.lastModified()
            if (lastModified != 0 && lastModified < threeMonthsAgo.time) {
                file.delete()
            }
        }
    }
}
