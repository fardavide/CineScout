import cinescout.database.model.id.DatabaseTmdbEpisodeId;
import cinescout.database.model.id.DatabaseTmdbSeasonId;
import cinescout.database.model.id.DatabaseTmdbTvShowId;
import cinescout.database.model.id.DatabaseTraktEpisodeId;
import cinescout.database.model.id.DatabaseTraktSeasonId;
import cinescout.database.model.id.DatabaseTraktTvShowId;
import korlibs.time.Date;
import kotlin.Int;
import kotlin.time.Duration;

DROP TABLE IF EXISTS episode;

CREATE TABLE IF NOT EXISTS episode(
    traktId INTEGER AS DatabaseTraktEpisodeId NOT NULL PRIMARY KEY,
    tmdbId INTEGER AS DatabaseTmdbEpisodeId NOT NULL,
    firstAirDate INTEGER AS Date,
    number INTEGER AS Int NOT NULL,
    overview TEXT NOT NULL,
    ratingAverage REAL NOT NULL,
    ratingCount INTEGER NOT NULL,
    runtime INTEGER AS Duration NOT NULL,
    seasonId INTEGER AS DatabaseTraktSeasonId NOT NULL,
    seasonNumber INTEGER AS Int NOT NULL,
    title TEXT NOT NULL,

    FOREIGN KEY(seasonId) REFERENCES season(traktId)
);

CREATE INDEX IF NOT EXISTS episode_seasonId ON episode(seasonId);

DROP TABLE IF EXISTS season;

CREATE TABLE IF NOT EXISTS season(
    traktId INTEGER AS DatabaseTraktSeasonId NOT NULL PRIMARY KEY,
    tmdbId INTEGER AS DatabaseTmdbSeasonId NOT NULL,
    episodeCount INTEGER NOT NULL,
    firstAirDate INTEGER AS Date,
    number INTEGER AS Int NOT NULL,
    ratingAverage REAL NOT NULL,
    ratingCount INTEGER NOT NULL,
    title TEXT NOT NULL,
    tmdbTvShowId TEXT AS DatabaseTmdbTvShowId NOT NULL,
    traktTvShowId TEXT AS DatabaseTraktTvShowId NOT NULL,

    FOREIGN KEY(traktTvShowId) REFERENCES tvShow(traktId)
);

CREATE INDEX IF NOT EXISTS season_tmdbvShowId ON season(tmdbTvShowId);
CREATE INDEX IF NOT EXISTS season_traktTvShowId ON season(traktTvShowId);
