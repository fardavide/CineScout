import cinescout.database.model.DatabaseTmdbGenreId;
import cinescout.database.model.DatabaseTmdbPersonId;
import cinescout.database.model.DatabaseTmdbScreenplayId;
import kotlin.Int;

DROP TABLE IF EXISTS movieCastMember;
DROP TABLE IF EXISTS movieCrewMember;
DROP TABLE IF EXISTS tvShowCastMember;
DROP TABLE IF EXISTS tvShowCrewMember;

CREATE TABLE IF NOT EXISTS screenplayCastMember(
    screenplayId TEXT AS DatabaseTmdbScreenplayId NOT NULL,
    personId INTEGER AS DatabaseTmdbPersonId NOT NULL,
    character TEXT,
    memberOrder INTEGER NOT NULL,

    PRIMARY KEY (screenplayId, personId)
);

CREATE TABLE IF NOT EXISTS screenplayCrewMember(
    screenplayId TEXT AS DatabaseTmdbScreenplayId NOT NULL,
    personId INTEGER AS DatabaseTmdbPersonId NOT NULL,
    job TEXT,
    memberOrder INTEGER NOT NULL,

    PRIMARY KEY (screenplayId, personId)
);

DROP TABLE IF EXISTS movieGenre;
DROP TABLE IF EXISTS tvShowGenre;

CREATE TABLE IF NOT EXISTS screenplayGenre(
    screenplayId TEXT AS DatabaseTmdbScreenplayId NOT NULL,
    genreId INTEGER AS DatabaseTmdbGenreId NOT NULL,

    PRIMARY KEY (screenplayId, genreId)
);

DROP TABLE IF EXISTS movieRating;
DROP TABLE IF EXISTS tvShowRating;

CREATE TABLE IF NOT EXISTS personalRating(
    tmdbId TEXT AS DatabaseTmdbScreenplayId NOT NULL PRIMARY KEY,
    rating REAL AS Int NOT NULL
);

DROP TABLE IF EXISTS movieRecommendation;
DROP TABLE IF EXISTS tvShowRecommendation;

CREATE TABLE IF NOT EXISTS similar(
    tmdbId TEXT AS DatabaseTmdbScreenplayId NOT NULL,
    similarTmdbId TEXT AS DatabaseTmdbScreenplayId NOT NULL,

    PRIMARY KEY (tmdbId, similarTmdbId)
);
