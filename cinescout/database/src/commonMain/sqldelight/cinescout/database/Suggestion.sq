import cinescout.database.model.DatabaseSuggestionSource;
import cinescout.database.model.DatabaseTmdbScreenplayId;
import cinescout.database.model.DatabaseTraktScreenplayId;
import kotlin.Double;

CREATE TABLE IF NOT EXISTS suggestion(
    traktId TEXT AS DatabaseTraktScreenplayId NOT NULL PRIMARY KEY,
    tmdbId TEXT AS DatabaseTmdbScreenplayId NOT NULL,
    affinity REAL AS Double NOT NULL,
    source TEXT AS DatabaseSuggestionSource NOT NULL
);

find:
    SELECT *
    FROM suggestion
    WHERE tmdbId = ?;

findAllNotKnown:
    SELECT suggestion.*
    FROM suggestion
    LEFT JOIN voting ON suggestion.tmdbId == voting.tmdbId
    LEFT JOIN personalRating ON suggestion.tmdbId == personalRating.tmdbId
    LEFT JOIN watchlist ON suggestion.tmdbId == watchlist.tmdbId
    WHERE voting.tmdbId IS NULL AND
        personalRating.tmdbId IS NULL AND
        watchlist.tmdbId IS NULL
    ORDER BY affinity DESC, suggestion.traktId DESC;

findAllNotKnownMovies:
    SELECT suggestion.*
    FROM suggestion
    LEFT JOIN voting ON suggestion.tmdbId == voting.tmdbId
    LEFT JOIN personalRating ON suggestion.tmdbId == personalRating.tmdbId
    LEFT JOIN watchlist ON suggestion.tmdbId == watchlist.tmdbId
    WHERE suggestion.tmdbId LIKE 'movie%' AND
        voting.tmdbId IS NULL AND
        personalRating.tmdbId IS NULL AND
        watchlist.tmdbId IS NULL
    ORDER BY affinity DESC, suggestion.traktId DESC;

findAllNotKnownTvShows:
    SELECT suggestion.*
    FROM suggestion
    LEFT JOIN voting ON suggestion.tmdbId == voting.tmdbId
    LEFT JOIN personalRating ON suggestion.tmdbId == personalRating.tmdbId
    LEFT JOIN watchlist ON suggestion.tmdbId == watchlist.tmdbId
    WHERE suggestion.tmdbId LIKE 'tv%' AND
        voting.tmdbId IS NULL AND
        personalRating.tmdbId IS NULL AND
        watchlist.tmdbId IS NULL
    ORDER BY affinity DESC, suggestion.traktId DESC;

insert:
    INSERT OR REPLACE INTO suggestion(traktId, tmdbId, affinity, source)
    VALUES ?;
