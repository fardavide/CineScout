import cinescout.database.model.DatabaseTmdbTvShowId;
import com.soywiz.klock.Date;

CREATE TABLE IF NOT EXISTS tvShow(
    tmdbId INTEGER AS DatabaseTmdbTvShowId NOT NULL PRIMARY KEY,
    backdropPath TEXT,
    firstAirDate INTEGER AS Date NOT NULL,
    overview TEXT NOT NULL,
    posterPath TEXT,
    ratingAverage REAL NOT NULL,
    ratingCount INTEGER NOT NULL,
    title TEXT NOT NULL
);

findAllByQuery:
    SELECT * FROM tvShow WHERE title LIKE '%' || :query || '%'
    ORDER BY ratingCount DESC, ratingAverage DESC, title ASC;

findAllDisliked:
    SELECT
        tvShow.tmdbId,
        tvShow.backdropPath,
        tvShow.firstAirDate,
        tvShow.overview,
        tvShow.posterPath,
        tvShow.ratingAverage,
        tvShow.ratingCount,
        tvShow.title
    FROM tvShow AS tvShow
    INNER JOIN likedTvShow ON tvShow.tmdbId == likedTvShow.tmdbId
    WHERE likedTvShow.isLiked = 0;

findAllLiked:
    SELECT
        tvShow.tmdbId,
        tvShow.backdropPath,
        tvShow.firstAirDate,
        tvShow.overview,
        tvShow.posterPath,
        tvShow.ratingAverage,
        tvShow.ratingCount,
        tvShow.title
    FROM tvShow AS tvShow
    INNER JOIN likedTvShow ON tvShow.tmdbId == likedTvShow.tmdbId
    WHERE likedTvShow.isLiked = 1;

findAllInWatchlist:
    SELECT
        tvShow.tmdbId,
        tvShow.backdropPath,
        tvShow.firstAirDate,
        tvShow.overview,
        tvShow.posterPath,
        tvShow.ratingAverage,
        tvShow.ratingCount,
        tvShow.title
    FROM tvShow AS tvShow
    INNER JOIN tvShowWatchlist ON tvShow.tmdbId == tvShowWatchlist.tmdbId;

findAllRecomendations:
    SELECT
        tvShow.tmdbId,
        tvShow.backdropPath,
        tvShow.firstAirDate,
        tvShow.overview,
        tvShow.posterPath,
        tvShow.ratingAverage,
        tvShow.ratingCount,
        tvShow.title
    FROM tvShow AS tvShow
    INNER JOIN tvShowRecommendation ON tvShow.tmdbId == tvShowRecommendation.recommendedTvShowId
    WHERE tvShowRecommendation.tvShowId = ?;

findAllSuggested:
    SELECT
        tvShow.tmdbId,
        tvShow.backdropPath,
        tvShow.firstAirDate,
        tvShow.overview,
        tvShow.posterPath,
        tvShow.ratingAverage,
        tvShow.ratingCount,
        tvShow.title
    FROM tvShow AS tvShow
    INNER JOIN suggestedTvShow ON tvShow.tmdbId == suggestedTvShow.tmdbId
    LEFT JOIN likedTvShow ON tvShow.tmdbId == likedTvShow.tmdbId
    LEFT JOIN tvShowRating ON tvShow.tmdbId == tvShowRating.tmdbId
    LEFT JOIN tvShowWatchlist ON tvShow.tmdbId == tvShowWatchlist.tmdbId
    WHERE
        likedTvShow.tmdbId IS NULL AND
        tvShowRating.tmdbId IS NULL AND
        tvShowWatchlist.tmdbId IS NULL
    ORDER BY suggestedTvShow.affinity DESC, tvShow.ratingAverage DESC;

findAllWithPersonalRating:
    SELECT
        tvShow.tmdbId,
        tvShow.backdropPath,
        tvShow.overview,
        tvShow.posterPath,
        tvShow.ratingAverage,
        tvShow.ratingCount,
        tvShow.firstAirDate,
        tvShow.title,
        tvShowRating.rating AS personalRating
    FROM tvShowRating
    INNER JOIN tvShow ON tvShow.tmdbId = tvShowRating.tmdbId
    ORDER BY tvShowRating.rating DESC, tvShow.firstAirDate DESC, tvShow.title ASC;

findById:
    SELECT * FROM tvShow
    WHERE tmdbId = :id
    LIMIT 1;

findCastByTvShowId:
    SELECT
        person.tmdbId AS personId,
        tvShowCastMember.character,
        person.name,
        person.profileImagePath
    FROM tvShowCastMember
    JOIN person ON person.tmdbId = tvShowCastMember.personId
    WHERE tvShowCastMember.tvShowId = :id
    ORDER BY memberOrder;

findCrewByTvShowId:
    SELECT
        person.tmdbId AS personId,
        tvShowCrewMember.job,
        person.name,
        person.profileImagePath
    FROM tvShowCrewMember
    JOIN person ON person.tmdbId = tvShowCrewMember.personId
    WHERE tvShowCrewMember.tvShowId = :id
    ORDER BY memberOrder;

findGenresByTvShowId:
    SELECT
        genre.tmdbId AS genreId,
        genre.name
    FROM tvShowGenre
    JOIN genre ON genre.tmdbId = tvShowGenre.genreId
    WHERE tvShowGenre.tvShowId = :id;

findKeywordsByTvShowId:
    SELECT
        keyword.tmdbId AS genreId,
        keyword.name
    FROM tvShowKeyword
    JOIN keyword ON keyword.tmdbId = tvShowKeyword.keywordId
    WHERE tvShowKeyword.tvShowId = :id;

insertTvShow:
    INSERT OR REPLACE INTO tvShow(tmdbId, backdropPath, firstAirDate, overview, posterPath, ratingAverage, ratingCount, title)
    VALUES(?, ?, ?, ?, ?, ?, ?, ?);
