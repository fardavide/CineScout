import cinescout.database.model.DatabaseTmdbMovieId;
import com.soywiz.klock.Date;

CREATE TABLE IF NOT EXISTS movie(
    tmdbId INTEGER AS DatabaseTmdbMovieId NOT NULL PRIMARY KEY,
    backdropPath TEXT,
    posterPath TEXT,
    ratingAverage REAL NOT NULL,
    ratingCount INTEGER NOT NULL,
    releaseDate INTEGER AS Date,
    title TEXT NOT NULL
);

findAllDisliked:
    SELECT
        movie.tmdbId,
        movie.backdropPath,
        movie.posterPath,
        movie.ratingAverage,
        movie.ratingCount,
        movie.releaseDate,
        movie.title
    FROM movie AS movie
    INNER JOIN likedMovie ON movie.tmdbId == likedMovie.tmdbId
    WHERE likedMovie.isLiked = 0;

findAllLiked:
    SELECT
        movie.tmdbId,
        movie.backdropPath,
        movie.posterPath,
        movie.ratingAverage,
        movie.ratingCount,
        movie.releaseDate,
        movie.title
    FROM movie AS movie
    INNER JOIN likedMovie ON movie.tmdbId == likedMovie.tmdbId
    WHERE likedMovie.isLiked = 1;

findAllSuggested:
    SELECT
        movie.tmdbId,
        movie.backdropPath,
        movie.posterPath,
        movie.ratingAverage,
        movie.ratingCount,
        movie.releaseDate,
        movie.title
    FROM movie AS movie
    INNER JOIN suggestedMovie ON movie.tmdbId == suggestedMovie.tmdbId
    LEFT JOIN likedMovie ON movie.tmdbId == likedMovie.tmdbId
    LEFT JOIN movieRating ON movie.tmdbId == movieRating.tmdbId
    LEFT JOIN watchlist ON movie.tmdbId == watchlist.tmdbId
    WHERE
        likedMovie.tmdbId IS NULL AND
        movieRating.tmdbId IS NULL AND
        watchlist.tmdbId IS NULL
    ORDER BY suggestedMovie.affinity DESC;

findAllWithPersonalRating:
    SELECT
        movie.tmdbId,
        movie.backdropPath,
        movie.posterPath,
        movie.ratingAverage,
        movie.ratingCount,
        movie.releaseDate,
        movie.title,
        movieRating.rating AS personalRating
    FROM movieRating
    INNER JOIN movie ON movie.tmdbId = movieRating.tmdbId
    ORDER BY movieRating.rating DESC, movie.releaseDate DESC, movie.title ASC;

findById:
    SELECT * FROM movie
    WHERE tmdbId = :id
    LIMIT 1;

findCastByMovieId:
    SELECT
        person.tmdbId AS personId,
        movieCastMember.character,
        person.name,
        person.profileImagePath
    FROM movieCastMember
    JOIN person ON person.tmdbId = movieCastMember.personId
    WHERE movieCastMember.movieId = :id;

findCrewByMovieId:
    SELECT
        person.tmdbId AS personId,
        movieCrewMember.job,
        person.name,
        person.profileImagePath
    FROM movieCrewMember
    JOIN person ON person.tmdbId = movieCrewMember.personId
    WHERE movieCrewMember.movieId = :id;

findGenresByMovieId:
    SELECT
        genre.tmdbId AS genreId,
        genre.name
    FROM movieGenre
    JOIN genre ON genre.tmdbId = movieGenre.genreId
    WHERE movieGenre.movieId = :id;

findKeywordsByMovieId:
    SELECT
        keyword.tmdbId AS genreId,
        keyword.name
    FROM movieKeyword
    JOIN keyword ON keyword.tmdbId = movieKeyword.keywordId
    WHERE movieKeyword.movieId = :id;

insertMovie:
    INSERT OR REPLACE INTO movie(tmdbId, backdropPath, posterPath, ratingAverage, ratingCount, releaseDate, title)
    VALUES(?, ?, ?, ?, ?, ?, ?);
