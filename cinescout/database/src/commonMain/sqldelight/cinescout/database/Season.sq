import cinescout.database.model.id.DatabaseTmdbSeasonId;
import cinescout.database.model.id.DatabaseTraktSeasonId;
import cinescout.database.model.id.DatabaseTmdbTvShowId;
import cinescout.database.model.id.DatabaseTraktTvShowId;
import korlibs.time.Date;
import kotlin.time.Duration;
import kotlin.Int;

CREATE TABLE IF NOT EXISTS season(
    traktId INTEGER AS DatabaseTraktSeasonId NOT NULL PRIMARY KEY,
    tmdbId INTEGER AS DatabaseTmdbSeasonId NOT NULL,
    episodeCount INTEGER NOT NULL,
    firstAirDate INTEGER AS Date,
    number INTEGER AS Int NOT NULL,
    ratingAverage REAL NOT NULL,
    ratingCount INTEGER NOT NULL,
    title TEXT NOT NULL,
    tmdbTvShowId TEXT AS DatabaseTmdbTvShowId NOT NULL,
    traktTvShowId TEXT AS DatabaseTraktTvShowId NOT NULL,

    FOREIGN KEY(traktTvShowId) REFERENCES tvShow(traktId)
);

CREATE INDEX IF NOT EXISTS season_tmdbvShowId ON season(tmdbTvShowId);
CREATE INDEX IF NOT EXISTS season_traktTvShowId ON season(traktTvShowId);

CREATE VIEW IF NOT EXISTS seasonWithEpisode AS
    SELECT
        season.tmdbTvShowId AS tmdbTvShowId,
        season.traktTvShowId AS traktTvShowId,
        season.traktId AS seasonTraktId,
        season.tmdbId AS seasonTmdbId,
        season.episodeCount AS episodeCount,
        season.firstAirDate AS seasonFirstAirDate,
        season.number AS seasonNumber,
        season.ratingAverage AS seasonRatingAverage,
        season.ratingCount AS seasonRatingCount,
        season.title AS seasonTitle,
        episode.traktId AS episodeTraktId,
        episode.tmdbId AS episodeTmdbId,
        episode.firstAirDate AS episodeFirstAirDate,
        episode.number AS episodeNumber,
        episode.overview AS episodeOverview,
        episode.ratingAverage AS episodeRatingAverage,
        episode.ratingCount AS episodeRatingCount,
        episode.runtime AS episodeRuntime,
        episode.title AS episodeTitle,
        episode.seasonId AS episodeSeasonId
    FROM season
    INNER JOIN episode ON season.traktId = episode.seasonId;

findAllSeasonsWithEpisodesByTraktTvShowId:
    SELECT * FROM seasonWithEpisode WHERE traktTvShowId = ?
    ORDER BY seasonNumber ASC, episodeNumber ASC;

insert:
    INSERT OR REPLACE INTO season(
        traktId,
        tmdbId,
        episodeCount,
        firstAirDate,
        number,
        ratingAverage,
        ratingCount,
        title,
        tmdbTvShowId,
        traktTvShowId
    ) VALUES ?;
