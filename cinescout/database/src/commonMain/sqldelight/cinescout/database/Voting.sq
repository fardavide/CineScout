import cinescout.database.model.id.DatabaseTmdbScreenplayId;
import cinescout.database.model.id.DatabaseTraktScreenplayId;
import kotlin.Boolean;

CREATE TABLE IF NOT EXISTS voting(
    traktId TEXT AS DatabaseTraktScreenplayId NOT NULL PRIMARY KEY,
    tmdbId TEXT AS DatabaseTmdbScreenplayId NOT NULL,
    isLiked INTEGER AS Boolean NOT NULL
);

countAllDislikedByGenreId:
    SELECT COUNT(*) FROM voting
    WHERE (
        SELECT 1
        FROM screenplayGenre
        WHERE
            :genreSlug ISNULL OR (
                :genreSlug = screenplayGenre.genreSlug AND
                voting.traktId = screenplayGenre.screenplayId
            ) AND
            voting.isLiked = 0
    );

countAllDislikedMoviesByGenreId:
    SELECT COUNT(*) FROM voting
    WHERE (
        SELECT 1
        FROM screenplayGenre
        WHERE
            :genreSlug ISNULL OR (
                :genreSlug = screenplayGenre.genreSlug AND
                voting.traktId = screenplayGenre.screenplayId
            ) AND
            voting.isLiked = 0 AND
            voting.traktId LIKE 'movie%'
    );

countAllDislikedTvShowsByGenreId:
    SELECT COUNT(*) FROM voting
    WHERE (
        SELECT 1
        FROM screenplayGenre
        WHERE
            :genreSlug ISNULL OR (
                :genreSlug = screenplayGenre.genreSlug AND
                voting.traktId = screenplayGenre.screenplayId
            ) AND
            voting.isLiked = 0 AND
            voting.traktId LIKE 'tv%'
    );

countAllLikedByGenreId:
    SELECT COUNT(*) FROM voting
    WHERE (
        SELECT 1
        FROM screenplayGenre
        WHERE
            :genreSlug ISNULL OR (
                :genreSlug = screenplayGenre.genreSlug AND
                voting.traktId = screenplayGenre.screenplayId
            ) AND
            voting.isLiked = 1
    );

countAllLikedMoviesByGenreId:
    SELECT COUNT(*) FROM voting
    WHERE (
        SELECT 1
        FROM screenplayGenre
        WHERE
            :genreSlug ISNULL OR (
                :genreSlug = screenplayGenre.genreSlug AND
                voting.traktId = screenplayGenre.screenplayId
            ) AND
            voting.isLiked = 1 AND
            voting.traktId LIKE 'movie%'
    );

countAllLikedTvShowsByGenreId:
    SELECT COUNT(*) FROM voting
    WHERE (
        SELECT 1
        FROM screenplayGenre
        WHERE
            :genreSlug ISNULL OR (
                :genreSlug = screenplayGenre.genreSlug AND
                voting.traktId = screenplayGenre.screenplayId
            ) AND
            voting.isLiked = 1 AND
            voting.traktId LIKE 'tv%'
    );

findAllNotFetchedIds:
    SELECT
        tmdbId,
        traktId
    FROM voting
    WHERE NOT EXISTS (
        SELECT 1 FROM screenplay
        WHERE screenplay.movieTraktId = voting.traktId
        OR screenplay.tvShowTraktId = voting.traktId
    );

findByTmdbId:
    SELECT * FROM voting
    WHERE tmdbId = :id
    LIMIT 1;

findByTraktId:
    SELECT * FROM voting
    WHERE traktId = :id
    LIMIT 1;

insert:
    INSERT OR REPLACE INTO voting(traktId, tmdbId, isLiked)
    VALUES(?, ?, ?);
