import cinescout.database.model.id.DatabaseHistoryItemId;
import cinescout.database.model.id.DatabaseTmdbScreenplayId;
import cinescout.database.model.id.DatabaseTraktScreenplayId;
import korlibs.time.DateTime;
import kotlin.Int;

CREATE TABLE IF NOT EXISTS history (
    itemId INTEGER AS DatabaseHistoryItemId NOT NULL PRIMARY KEY AUTOINCREMENT,
    traktId TEXT AS DatabaseTraktScreenplayId NOT NULL,
    tmdbId TEXT AS DatabaseTmdbScreenplayId NOT NULL,
    watchedAt REAL AS DateTime NOT NULL,
    seasonNumber INTEGER AS Int,
    episodeNumber INTEGER AS Int,
    isPlaceholder INTEGER NOT NULL DEFAULT 0
);

deleteAllByMovieTraktId:
    DELETE FROM history
    WHERE traktId = 'movie:' || :id;

deleteAllByTvShowTraktId:
    DELETE FROM history
    WHERE traktId = 'tv:' || :id;

deletePlaceholders:
    DELETE FROM history
    WHERE isPlaceholder = 1;

findAllByMovieTraktId:
    SELECT * FROM history
    WHERE traktId = 'movie:' || :id
    ORDER BY watchedAt DESC;

findAllByTvShowTraktId:
    SELECT * FROM history
    WHERE traktId = 'tv:' || :id
    ORDER BY watchedAt DESC;

insert:
    INSERT OR REPLACE INTO history (itemId, traktId, tmdbId, watchedAt, seasonNumber, episodeNumber)
    VALUES ?;

insertMoviePlaceholder:
    INSERT OR REPLACE INTO history (traktId, tmdbId, watchedAt, seasonNumber, episodeNumber, isPlaceholder)
    VALUES ( :traktId, :tmdbId, datetime(), NULL, NULL, 1);

insertEpisodePlaceholder:
    INSERT OR REPLACE INTO history (traktId, tmdbId, watchedAt, seasonNumber, episodeNumber, isPlaceholder)
    VALUES (:traktId, :tmdbId, datetime(), :seasonNumber, :episodeNumber, 1);
