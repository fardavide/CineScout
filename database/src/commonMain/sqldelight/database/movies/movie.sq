import entities.IntId;
import entities.TmdbId;
import entities.model.Name;
import kotlin.UInt;

CREATE TABLE IF NOT EXISTS movie (
  id INTEGER as IntId NOT NULL PRIMARY KEY AUTOINCREMENT,
  tmdbId INTEGER as TmdbId NOT NULL,
  title TEXT as Name NOT NULL,
  year INTEGER as UInt NOT NULL,
  imageBaseUrl TEXT, -- null only if posterPath and backdropPath are also null
  posterPath TEXT, -- may be null
  backdropPath TEXT, -- may be null
  voteAverage REAL NOT NULL,
  voteCount INTEGER NOT NULL,
  popularity REAL NOT NULL,
  overview TEXT NOT NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS movie_tmdbId ON movie(tmdbId);
CREATE INDEX IF NOT EXISTS movie_title ON movie(title);

insert:
  INSERT
  INTO movie(tmdbId, title, year, imageBaseUrl, posterPath, backdropPath, voteAverage, voteCount, popularity, overview)
  VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

update:
  UPDATE movie
  SET title = ?, year = ?
  WHERE tmdbId = ?;

selectIdByTmdbId:
  SELECT id
  FROM movie
  WHERE tmdbId = ?
  LIMIT 1;

selectAll:
  SELECT *
  FROM movie;

CREATE VIEW IF NOT EXISTS movieDetails AS
SELECT
  movie.id,
  movie.tmdbId,
  title,
  year,
  imageBaseUrl,
  posterPath,
  backdropPath,
  actor.tmdbId actorTmdbId,
  actor.name actorName,
  voteAverage,
  voteCount,
  popularity,
  overview,
  genre.tmdbId genreTmdbId,
  genre.name genreName,
  video.tmdbId videoTmdbId,
  video.name videoName,
  video.site videoSite,
  video.key videoKey,
  video.size videoSize,
  video.type videoType
FROM movie
JOIN movie_actor ON movie.id = movie_actor.movieId
JOIN movie_genre ON movie.id = movie_genre.movieId
LEFT JOIN movie_video ON movie.id = movie_video.movieId
JOIN actor ON movie_actor.actorId = actor.id
JOIN genre ON movie_genre.genreId = genre.id
LEFT JOIN video ON movie_video.videoId = movie.id;

CREATE VIEW IF NOT EXISTS movieDetailsWithRating AS
SELECT
  movieDetails.id,
  tmdbId,
  title,
  year,
  imageBaseUrl,
  posterPath,
  backdropPath,
  actorTmdbId,
  actorName,
  voteAverage,
  voteCount,
  popularity,
  overview,
  genreTmdbId,
  genreName,
  videoTmdbId,
  videoName,
  videoSite,
  videoKey,
  videoSize,
  videoType,
  rating
FROM movieDetails
JOIN stat ON stat.statId = movieDetails.id AND stat.type = "movie";

selectAllRated:
  SELECT *
  FROM movieDetailsWithRating
  ORDER BY rating DESC;

selectTopRated:
  SELECT *
  FROM movieDetailsWithRating
  ORDER BY rating DESC
  LIMIT ?;

selectSuggested:
  SELECT *
  FROM movieDetails
  JOIN suggestion ON suggestion.movieId = movieDetails.id;

selectMovieRatingByTmdbId:
  SELECT
    rating
  FROM movie
  JOIN stat ON stat.statId = movie.id AND stat.type = "movie"
  AND movie.tmdbId = ?
  LIMIT 1;

selectAllInWatchlist:
  SELECT
    movieDetails.id,
    movieDetails.tmdbId,
    movieDetails.title,
    movieDetails.year,
    movieDetails.imageBaseUrl,
    movieDetails.posterPath,
    movieDetails.backdropPath,
    movieDetails.actorTmdbId,
    movieDetails.actorName,
    movieDetails.voteAverage,
    movieDetails.voteCount,
    movieDetails.popularity,
    overview,
    movieDetails.genreTmdbId,
    movieDetails.genreName,
    movieDetails.videoTmdbId,
    movieDetails.videoName,
    movieDetails.videoSite,
    movieDetails.videoKey,
    movieDetails.videoSize,
    movieDetails.videoType
  FROM movieDetails
  JOIN watchlist ON watchlist.movieId = movieDetails.id;

selectInWatchlistByTmdbId:
  SELECT
    movie.id
  FROM movie
  JOIN watchlist ON watchlist.movieId = movie.id
  AND movie.tmdbId = ?
  LIMIT 1;

deleteAll:
  DELETE FROM movie;
